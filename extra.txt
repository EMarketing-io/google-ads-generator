ad generator

import json
import time
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain

# === Updated Prompt Template with Callouts + Sitelinks ===
prompt_template = PromptTemplate(
    input_variables=["rules", "company", "offers", "keywords"],
    template="""
You are a Google Ads strategist.

🎯 TASK:
Generate a high-converting Responsive Search Ad for a service using the provided TRAINING RULES, COMPANY INFO, OFFERS, and KEYWORDS.

✅ Your ad must include:
- A meaningful ad group name based on keyword theme (not "Group 1")
- 10 diverse and creative headlines (max 30 chars, avoid repeated words)
- 4 full, grammatically correct descriptions (max 90 chars)
- 8 callouts (max 25 words each, value-driven)
- 4 sitelinks, each with:
    - 1 sitelink headline (max 25 words)
    - 2 sitelink descriptions (each max 35 words)

💡 Headlines should:
- Highlight different features, offers, benefits, or actions
- Avoid repeating any word more than once
- Use emotion, value, and specificity

💡 Callouts should:
- Be short, impactful phrases (e.g., "Free Estimates", "Trusted by 10,000+ Clients")
- Max 25 words each
- No punctuation unless needed for clarity
- Not overlap with descriptions or headlines

💡 Sitelinks should:
- Be value-based, relevant, and distinct
- Descriptions should elaborate on the sitelink headline
- Use sentence case

# TRAINING RULES:
{rules}

# COMPANY INFO:
{company}

# CURRENT OFFERS:
{offers}

# KEYWORDS:
{keywords}

Return only valid JSON:
{{
  "adGroupName": "<<< generated >>>",
  "path1": "...",
  "path2": "...",
  "headlines": ["..."],
  "descriptions": ["..."],
  "callouts": ["..."],
  "sitelinks": [
    {{
      "headline": "...",
      "description1": "...",
      "description2": "..."
    }},
    ...
  ]
}}
""",
)


def generate_ads(llm, keyword_groups, rules, company, offers):
    chain = LLMChain(llm=llm, prompt=prompt_template)
    ads = []

    for idx, (label, keywords) in enumerate(keyword_groups.items()):
        print(
            f"\n📢 [{idx+1}/{len(keyword_groups)}] Generating ad for keyword group: '{label}'"
        )
        try:
            response = chain.run(
                rules=rules,
                company=company,
                offers=offers,
                keywords=", ".join(keywords),
            )
            ad = json.loads(response.strip("```json\n").strip("```").strip())

            unique_headlines = list(dict.fromkeys(ad.get("headlines", [])))[:10]
            unique_descriptions = list(dict.fromkeys(ad.get("descriptions", [])))[:4]
            unique_callouts = list(dict.fromkeys(ad.get("callouts", [])))[:8]
            sitelinks = ad.get("sitelinks", [])[:4]

            ads.append(
                {
                    "Campaign": "emarketing",
                    "Ad group": ad.get("adGroupName", f"AdGroup_{idx+1}"),
                    "Ad type": "Responsive Search Ad",
                    "Final URL": "",
                    "Path 1": ad.get("path1", ""),
                    "Path 2": ad.get("path2", ""),
                    **{
                        f"Headline {i+1}": (
                            unique_headlines[i] if i < len(unique_headlines) else ""
                        )
                        for i in range(10)
                    },
                    **{
                        f"Description {i+1}": (
                            unique_descriptions[i]
                            if i < len(unique_descriptions)
                            else ""
                        )
                        for i in range(4)
                    },
                    **{
                        f"Callout {i+1}": (
                            unique_callouts[i] if i < len(unique_callouts) else ""
                        )
                        for i in range(8)
                    },
                    **{
                        f"Sitelink Headline {i+1}": (
                            sitelinks[i]["headline"]
                            if i < len(sitelinks) and "headline" in sitelinks[i]
                            else ""
                        )
                        for i in range(4)
                    },
                    **{
                        f"Sitelink Description {2*i+1}": (
                            sitelinks[i]["description1"]
                            if i < len(sitelinks) and "description1" in sitelinks[i]
                            else ""
                        )
                        for i in range(4)
                    },
                    **{
                        f"Sitelink Description {2*i+2}": (
                            sitelinks[i]["description2"]
                            if i < len(sitelinks) and "description2" in sitelinks[i]
                            else ""
                        )
                        for i in range(4)
                    },
                }
            )
        except Exception as e:
            print(f"❌ Error for group '{label}': {e}")
        time.sleep(1)

    return ads
